//Extra Small Screen Only
@mixin xs {
	@media screen and (max-width: 767px) {
		@content;
	}
}

//Small Screen
@mixin sm {
	@media screen and (min-width: 576px) {
		@content;
	}
}

//Medium Screen
@mixin md {
	@media screen and (min-width: 768px) {
		@content;
	}
}

//Large Screen
@mixin lg {
	@media screen and (min-width: 992px) {
		@content;
	}
}

//Extra Large Screen
@mixin xl {
	@media screen and (min-width: 1200px) {
		@content;
	}
}

//Desktop Screen
@mixin desktop {
	@media screen and (min-width: 1367px) {
		@content;
	}
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min !=0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);

	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}

	@else {
		@content;
	}
}

//Gird Columns Width Responsive
@mixin col($brackpoint, $grid-columns) {
	.col-#{$brackpoint}-#{$grid-columns} {
		@include make-col-ready();

		@include media-breakpoint-up(#{$brackpoint}) {
			@include make-col($grid-columns);
		}
	}
}

//Create the mixin for theme colors
@mixin theme($name, $color) {
	// Define colors in your theme
	$primary: $color;
	$bg-color: $color;

	// Add your Prefix classe name
	.#{$name}-color {
		color: $primary;
	}

	.bg-#{$name} {
		background: $primary;
	}
	
}

// Gradient Color Class Name with Mixin
@mixin class($class, $name) {
	.#{$class} {
		@include gradient($name);
	}
}

// Margin Class Name with Mixin
@mixin margin($name, $value) {
	// Add your Prefix classe name
	@if $name==mt {
		.#{$name}-#{$value} {
			margin-top: #{$value}px;
		}
	}

	@else if $name==mb {
		.#{$name}-#{$value} {
			margin-bottom: #{$value}px;
		}
	}

	@else if $name==ml {
		.#{$name}-#{$value} {
			margin-left: #{$value}px;
		}
	}

	@else if $name==mr {
		.#{$name}-#{$value} {
			margin-right: #{$value}px;
		}
	}

	@else if $name==mx {
		.#{$name}-#{$value} {
			margin-left: #{$value}px;
			margin-right: #{$value}px;
		}
	}

	@else {
		.#{$name}-#{$value} {
			margin-top: #{$value}px;
			margin-bottom: #{$value}px;
		}
	}
}

// Responsive Margin Class Name with Mixin
@mixin margin-rs($name, $brakpoint, $value) {
	// Add your Prefix classe name
	@if $name==mt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value}px;
			}
		}
	}

	@else if $name==mb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-bottom: #{$value}px;
			}
		}
	}

	@else if $name==ml {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value}px;
			}
		}
	}

	@else if $name==mr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-right: #{$value}px;
			}
		}
	}

	@else if $name==mx {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value}px;
				margin-right: #{$value}px;
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value}px;
				margin-bottom: #{$value}px;
			}
		}
	}
}

// Padding Class Name with Mixin
@mixin padding($name, $value) {
	// Add your Prefix classe name
	@if $name==pt {
		.#{$name}-#{$value} {
			padding-top: #{$value}px;
		}
	}

	@else if $name==pb {
		.#{$name}-#{$value} {
			padding-bottom: #{$value}px;
		}
	}

	@else if $name==pl {
		.#{$name}-#{$value} {
			padding-left: #{$value}px;
		}
	}

	@else if $name==pr {
		.#{$name}-#{$value} {
			padding-right: #{$value}px;
		}
	}

	@else if $name==px {
		.#{$name}-#{$value} {
			padding-left: #{$value}px;
			padding-right: #{$value}px;
		}
	}

	@else {
		.#{$name}-#{$value} {
			padding-top: #{$value}px;
			padding-bottom: #{$value}px;
		}
	}
}

// Responsive Margin Class Name with Mixin
@mixin padding-rs($name, $brakpoint, $value) {

	// Add your Prefix classe name
	@if $name==mt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value}px;
			}
		}
	}

	@else if $name==mb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-bottom: #{$value}px;
			}
		}
	}

	@else if $name==ml {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value}px;
			}
		}
	}

	@else if $name==mr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-right: #{$value}px;
			}
		}
	}

	@else if $name==mx {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value}px;
				padding-right: #{$value}px;
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value}px;
				padding-bottom: #{$value}px;
			}
		}
	}
}


// Button mixin
@mixin btn ($position: relative, $padding-y, $padding-x, $size: $global-font-size, $border: null, $radius: null, $display: inline-block, $line-height: 1, $font-weight: normal) {
	position: $position;
	border: $border;
	border-radius: $radius;
	padding: $padding-y $padding-x;
	font-size: $size;
	line-height: $line-height;
	display: $display;
	overflow: hidden;
	text-align: center;
	font-weight: $font-weight;
}

// Button Color
@mixin btn-color($value, $color) {
	background: $value;
	color: $color;
}

// Gradient Color Mixin
@mixin gradient($list) {
	background: -webkit-linear-gradient($list);
	background: -moz-linear-gradient($list);
	background: -o-linear-gradient($list);
	background: linear-gradient($list);
}

// Size 
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

// Posion Top/Bottom/Left/Right
@mixin positions($value) {
	position: absolute;
	top: $value;
	bottom: $value;
	left: $value;
	right: $value;
}

//Position mixin
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);

		@if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
			#{$o}: nth($args, $i + 1);
		}
	}

	position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin fixed($args: '') {
	@include position(fixed, $args);
}

@mixin relative($args: '') {
	@include position(relative, $args);
}

// Font Responsive
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1==$u2 and $u1==$u3 and $u1==$u4 {
		& {
			font-size: $min-font-size;

			@media screen and (min-width: $min-vw) {
				font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			}

			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// Border 
@mixin border($type: null, $size: 1px, $style: solid, $color: $global-color) {
	@if $type==top {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==bottom {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==left {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==right {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else {
		border: #{$size} #{$style} #{$color};
	}
}

// Border Radius Mixin
@mixin radius($value) {
	border-radius: $value;
}

// Box Shadow Mixin
@mixin shadow($x: 0, $y: 0, $b: 0, $color, $opacity: 1) {
	-webkit-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	-moz-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
}

// prefix declarations
@mixin prefixed($property, $value) {
	@if $webkit==true {
		-webkit-#{$property}: #{$value};
	}

	@if $moz==true {
		-moz-#{$property}: #{$value};
	}

	@if $ms==true {
		-ms-#{$property}: #{$value};
	}

	@if $o==true {
		-o-#{$property}: #{$value};
	}

	#{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
	@if $webkit==true {
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $moz==true {
		@-moz-keyframes #{$name} {
			@content;
		}
	}

	@if $ms==true {
		@-ms-keyframes #{$name} {
			@content;
		}
	}

	@if $o==true {
		@-o-keyframes #{$name} {
			@content;
		}
	}

	@keyframes #{$name} {
		@content;
	}
}

@mixin property() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transition, 0.3s ease-out);
}

@mixin transform() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transform, translate(0, -50%));
}

// Form Input mixin 
@mixin form-input($width: 100%, $color: $global-color, $font-size: $global-font-size, $px, $py, $m: 30px, $opacity: 1, $border: none) {
	width: $width;
	color: $color;
	opacity:$opacity;
	padding: $py $px;
	margin-top: $m;
	font-size: $font-size;
	border: $border;
}

// Dropdown Menu Mixin
@mixin dropdown-menu($width: 240px, $padding: 15px, $apadding: 10px, $margin: 5px, $align: left, $top: 100%, $index: 99, $radius: null, $shadow: null, $hover-bg: $black, $hover-color: $white) {
	position: absolute;
	width: $width;
	padding: $padding;
	text-align: $align;
	top: $top;
	z-index: $index;
	border-radius: $radius;
	box-shadow: $shadow;
	opacity: 0;
	visibility: hidden;

	li{
		display: block;
		a{
			border-radius: $radius;
			padding: $apadding;
			margin-bottom: $margin;
			display: block;
			&:hover{
				background: $hover-bg;
				color: $hover-color;
			}
		}
	}
}



// Footer Menu 
@mixin footer-menu($size: 18px, $padding: 10px, $opacity: 1, $display: block, $text: capitalize) {
	ul {
		li {
			a {
				font-size: $size;
				opacity: $opacity;
				padding-bottom: $padding;
				display: $display;
				text-transform: $text;
			}
		}
	}
}

// Footer Widget 
@mixin footer-widget($value, $weight: 600, $prefix, $padding) {
	h3{
		font-size: $value;
		padding-#{$prefix}: $padding;
		font-weight: $weight;
	}
	@include footer-menu;
}
