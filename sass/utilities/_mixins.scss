/*--------------------------------------
	- Base
----------------------------------------*/

// Body Mixin
@mixin body($font-family: $font, $font-weight: 400, $color: $global-color, $font-size: $global-font-size, $line-height: 28px) {
	font-family: $font-family;
	font-weight: $font-weight;
	font-size: $font-size;
	line-height: $line-height;
	color: $color;
}

// Font Responsive
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1==$u2 and $u1==$u3 and $u1==$u4 {
		& {
			font-size: $min-font-size;

			@media screen and (min-width: $min-vw) {
				font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			}

			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// Font Size
@mixin font-size($size) {
	font-size: $size;
}

// Font Size Class
@mixin font($size, $brackpoint: null, $pre: px) {

	@if $brackpoint {
		@include media-breakpoint-up(#{$brackpoint}) {
			.font-#{$brackpoint}-#{$size} {
				font-size: #{$size}#{$pre};
			}
		}
	}

	@else {
		.font-#{$size} {
			font-size: #{$size}#{$pre};
		}
	}
}

//Line Height
@mixin line-height($size, $brackpoint: null, $pre: px) {
	@if $brackpoint {
		@include media-breakpoint-up(#{$brackpoint}) {
			.line-height-#{$brackpoint}-#{$size} {
				line-height: #{$size}#{$pre};
			}
		}
	}

	@else {
		.line-height-#{$size} {
			line-height: #{$size}#{$pre};
		}
	}
}

// hr mixin
@mixin hr($bg: $global-color, $width: 50px, $height: 5px, $my: 50px, $mx: 0, $p: 0, $radius: 0) {
	background: $bg;
	width: $width;
	height: $height;
	margin: $my $mx;
	padding: $p;
	border-radius: $radius;
}

/*--------------------------------------
	- Layout
----------------------------------------*/
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min !=0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);

	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}

	@else {
		@content;
	}
}

//Gird Columns Width Responsive
@mixin col($brackpoint, $grid-columns) {
	.col-#{$brackpoint}-#{$grid-columns} {
		@include make-col-ready();

		@include media-breakpoint-up(#{$brackpoint}) {
			@include make-col($grid-columns);
		}
	}
}

/*--------------------------------------
	- Utilities
----------------------------------------*/
//Create the mixin for theme colors
@mixin color($name, $color) {
	// Define colors in your theme
	$primary: $color;
	$bg-color: $color;

	// Add your Prefix classe name
	.#{$name}-color {
		color: $primary;
	}

	.bg-#{$name} {
		background: $primary;
	}
	
}
// Gradient Color Mixin
@mixin gradient($direction, $list) {
	background: -webkit-linear-gradient($direction, $list);
	background: -moz-linear-gradient($direction, $list);
	background: -o-linear-gradient($direction, $list);
	background: linear-gradient($direction, $list);
}

// Gradient Color Class Name with Mixin
@mixin gr-class($class, $direction, $name) {
	.#{$class} {
		@include gradient($direction, $name);
	}
}

// Margin Class Name with Mixin
@mixin margin($name, $value) {
	// Add your Prefix classe name
	@if $name==m {
		.#{$name}-#{$value} {
			margin: #{$value}px;
		}
	}
	
	@if $name==mt {
		.#{$name}-#{$value} {
			margin-top: #{$value}px;
		}
	}

	@else if $name==mb {
		.#{$name}-#{$value} {
			margin-bottom: #{$value}px;
		}
	}

	@else if $name==ml {
		.#{$name}-#{$value} {
			margin-left: #{$value}px;
		}
	}

	@else if $name==mr {
		.#{$name}-#{$value} {
			margin-right: #{$value}px;
		}
	}

	@else if $name==mx {
		.#{$name}-#{$value} {
			margin-left: #{$value}px;
			margin-right: #{$value}px;
		}
	}

	@else {
		.#{$name}-#{$value} {
			margin-top: #{$value}px;
			margin-bottom: #{$value}px;
		}
	}
}

// Margin Auto
@mixin m-auto($name, $value) {
	@if $name==m {
		.#{$name}-#{$value} {
			margin: #{$value};
		}
	}

	@if $name==mt {
		.#{$name}-#{$value} {
			margin-top: #{$value};
		}
	}

	@else if $name==mb {
		.#{$name}-#{$value} {
			margin-bottom: #{$value};
		}
	}

	@else if $name==ml {
		.#{$name}-#{$value} {
			margin-left: #{$value};
		}
	}

	@else if $name==mr {
		.#{$name}-#{$value} {
			margin-right: #{$value};
		}
	}

	@else if $name==mx {
		.#{$name}-#{$value} {
			margin-left: #{$value};
			margin-right: #{$value};
		}
	}

	@else {
		.#{$name}-#{$value} {
			margin-top: #{$value};
			margin-bottom: #{$value};
		}
	}
}

// Responsive Margin Class Name with Mixin
@mixin margin-rs($name, $brakpoint, $value) {
	// Add your Prefix classe name
	@if $name==mt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value}px;
			}
		}
	}

	@else if $name==mb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-bottom: #{$value}px;
			}
		}
	}

	@else if $name==ml {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value}px;
			}
		}
	}

	@else if $name==mr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-right: #{$value}px;
			}
		}
	}

	@else if $name==mx {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value}px;
				margin-right: #{$value}px;
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value}px;
				margin-bottom: #{$value}px;
			}
		}
	}
}

// Responsive Margin Auto with Mixin
@mixin m-auto-rs($name, $brakpoint, $value) {

	// Add your Prefix classe name
	@if $name==mt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value};
			}
		}
	}

	@else if $name==mb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-bottom: #{$value};
			}
		}
	}

	@else if $name==ml {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value};
			}
		}
	}

	@else if $name==mr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-right: #{$value};
			}
		}
	}

	@else if $name==mx {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-left: #{$value};
				margin-right: #{$value};
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				margin-top: #{$value};
				margin-bottom: #{$value};
			}
		}
	}
}

// Padding Class Name with Mixin
@mixin padding($name, $value) {
	// Add your Prefix classe name
	@if $name==pt {
		.#{$name}-#{$value} {
			padding-top: #{$value}px;
		}
	}

	@else if $name==pb {
		.#{$name}-#{$value} {
			padding-bottom: #{$value}px;
		}
	}

	@else if $name==pl {
		.#{$name}-#{$value} {
			padding-left: #{$value}px;
		}
	}

	@else if $name==pr {
		.#{$name}-#{$value} {
			padding-right: #{$value}px;
		}
	}

	@else if $name==px {
		.#{$name}-#{$value} {
			padding-left: #{$value}px;
			padding-right: #{$value}px;
		}
	}

	@else if $name==py {
		.#{$name}-#{$value} {
			padding-top: #{$value}px;
			padding-bottom: #{$value}px;
		}
	}

	@else {
		.#{$name}-#{$value} {
			padding: #{$value}px;
		}
	}
}

// Padding Auto
@mixin p-auto($name, $value) {
	@if $name==pt {
		.#{$name}-#{$value} {
			padding-top: #{$value};
		}
	}

	@else if $name==pb {
		.#{$name}-#{$value} {
			padding-bottom: #{$value};
		}
	}

	@else if $name==pl {
		.#{$name}-#{$value} {
			padding-left: #{$value};
		}
	}

	@else if $name==pr {
		.#{$name}-#{$value} {
			padding-right: #{$value};
		}
	}

	@else if $name==px {
		.#{$name}-#{$value} {
			padding-left: #{$value};
			padding-right: #{$value};
		}
	}

	@else if $name==py {
		.#{$name}-#{$value} {
			padding-top: #{$value};
			padding-bottom: #{$value};
		}
	}

	@else {
		.#{$name}-#{$value} {
			padding: #{$value};
		}
	}
}

// Responsive Padding Class Name with Mixin
@mixin padding-rs($name, $brakpoint, $value) {

	// Add your Prefix classe name
	@if $name==pt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value}px;
			}
		}
	}

	@else if $name==pb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-bottom: #{$value}px;
			}
		}
	}

	@else if $name==pl {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value}px;
			}
		}
	}

	@else if $name==pr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-right: #{$value}px;
			}
		}
	}

	@else if $name==px {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value}px;
				padding-right: #{$value}px;
			}
		}
	}

	@else if $name==py {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value}px;
				padding-bottom: #{$value}px;
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding: #{$value}px;
			}
		}
	}
}

// Responsive Padding Auto with Mixin
@mixin p-auto-rs($name, $brakpoint, $value) {

	// Add your Prefix classe name
	@if $name==pt {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value};
			}
		}
	}

	@else if $name==pb {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-bottom: #{$value};
			}
		}
	}

	@else if $name==pl {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value};
			}
		}
	}

	@else if $name==pr {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-right: #{$value};
			}
		}
	}

	@else if $name==px {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-left: #{$value};
				padding-right: #{$value};
			}
		}
	}

	@else if $name==py {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding-top: #{$value};
				padding-bottom: #{$value};
			}
		}
	}

	@else {
		.#{$name}-#{$brakpoint}-#{$value} {
			@include media-breakpoint-up(#{$brakpoint}) {
				padding: #{$value};
			}
		}
	}
}

// Border 
@mixin border($type: null, $size: 1px, $style: solid, $color: $global-color) {
	@if $type==top {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==bottom {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==left {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==right {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else {
		border: #{$size} #{$style} #{$color};
	}
}

// Border 
@mixin border-class($type: null, $size: 1px, $style: solid, $color: $global-color) {
	// Add your Prefix classe name
	@if $type==top {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==bottom {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==left {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==right {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else {
		.border {
			border: #{$size} #{$style} #{$color};
		}
	}
}

// Border 
@mixin border-rs($brakpoint, $type: null, $size: 1px, $style: solid, $color: $global-color) {
	// Add your Prefix classe name
	@if $type==top {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==bottom {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==left {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==right {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else {
		.border-#{$brakpoint} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border: #{$size} #{$style} #{$color};
			}
		}
	}
}

// Border Width
@mixin border-width($type: null, $size: 1px) {
	@if $type==top {
		border#{-$type}-width: #{$size};
	}

	@else if $type==right {
		border#{-$type}-width: #{$size};
	}

	@else if $type==bottom {
		border#{-$type}-width: #{$size};
	}

	@else if $type==left {
		border#{-$type}-width: #{$size};
	}

	@else {
		border: #{$size};
	}
}

// Border Color
@mixin border-color($color: $global-color) {
	border-color: #{$color};
}

// Border Style
@mixin border-style($style: solid) {
	border-style: #{$style};
}

// Border Radius Mixin
@mixin radius($type: null, $size) {
	@if $type==top {
		border#{-$type}-left-radius: #{$size};
		border#{-$type}-right-radius: #{$size};
	}

	@else if $type==right {
		border-top-right-radius: #{$size};
		border-bottom-right-radius: #{$size};
	}

	@else if $type==bottom {
		border#{-$type}-left-radius: #{$size};
		border#{-$type}-right-radius: #{$size};
	}

	@else if $type==left {
		border-top-left-radius: #{$size};
		border-bottom-left-radius: #{$size};
	}

	@else {
		border-radius: #{$size};
	}
}

//Display mixin
@mixin display($value) {
	.d-#{$value} {
		display: $value;
	}
}

//Responsive Display Mixin
@mixin display-rs($brakpoint, $value) {
	.d-#{$brakpoint}-#{$value} {
		@include media-breakpoint-up(#{$brakpoint}) {
			display: #{$value};
		}
	}
}

//Overlay Mixin
@mixin overlay($class, $width: 100%, $height: $width, $color: null, $direction: null, $gradient: null, $mode: null, $index: 999) {
	.overlay {
		overflow: hidden;
		position: relative;
		@include property;
	}

	@if $gradient {
		.overlay-#{$class} {
			&::before {
				content: '';
				@include absolute();
				@include size($width, $height: $width);
				@include property;
				@include gradient($direction, $gradient);
				mix-blend-mode: $mode;
				z-index: $index;
			}
		}
	}

	@else {
		.overlay-#{$class} {
			&::before {
				content: '';
				@include absolute();
				@include size($width, $height: $width);
				@include property;
				background: $color !important;
				mix-blend-mode: $mode;
				z-index: $index;
			}
		}
	}
}

//Overlay Opacity Mixin
@mixin overlay-opacity($name, $opacity: 1) {
	.overlay-opacity-#{$name} {
		&::before {
			opacity: $opacity;
		}
	}
}

// Size 
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

//Position mixin
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);

		@if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
			#{$o}: nth($args, $i + 1);
		}
	}

	position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin fixed($args: '') {
	@include position(fixed, $args);
}

@mixin relative($args: '') {
	@include position(relative, $args);
}

// Posion Top/Right/Bottom/Left Alignment
@mixin trbl($type, $value, $pre: null) {

	@if $type==top {
		.#{$type}-#{$value} {
			top: #{$value}#{$pre};
		}
	}

	@else if $type==right {
		.#{$type}-#{$value} {
			right: #{$value}#{$pre};
		}
	}

	@else if $type==bottom {
		.#{$type}-#{$value} {
			bottom: #{$value}#{$pre};
		}
	}

	@else if $type==left {
		.#{$type}-#{$value} {
			left: #{$value}#{$pre};
		}
	}
}

// Posion Top/Bottom/Left/Right Alignment
@mixin position-align($name, $position) {

	@if $name==center {
		@if $position==relative {
			.inset-#{$name} {
				@include relative(top 50% left 50%);
				transform: translate(-50%);
			}
		}

		@else {
			.inset-#{$name} {
				@include absolute(top 50% left 50%);
				transform: translate(-50%);
			}
		}
	}

	@else if $name==tl-center {
		@if $position==relative {
			.#{$name} {
				@include relative(top 50% left 0);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 50% left 0);
				transform: translateY(-50%);
			}
		}
	}

	@else if $name==tr-center {
		@if $position==relative {
			.#{$name} {
				@include relative(top 50% right 0);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 50% right 0);
				transform: translateY(-50%);
			}
		}
	}

	@else if $name==top-right {
		@if $position==relative {
			.#{$name} {
				@include relative(top 0 right 0);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 0 right 0);
			}
		}
	}

	@else if $name==bl-center {
		@if $position==relative {
			.#{$name} {
				@include relative(bottom 0 left 50%);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(bottom 0 left 50%);
				transform: translateX(-50%);
			}
		}
	}

	@else if $name==bottom-left {
		@if $position==relative {
			.#{$name} {
				@include relative(bottom 0 left 0);
			}
		}

		@else {
			.#{$name} {
				@include relative(bottom 0 left 0);
			}
		}
	}

	@else if $name==bottom-right {
		@if $position==relative {
			.#{$name} {
				@include relative(bottom 0 right 0);
			}
		}

		@else {
			.#{$name} {
				@include relative(bottom 0 right 0);
			}
		}
	}

}

// Box Shadow Mixin
@mixin shadow($x: 0, $y: 0, $b: 0, $color, $opacity: 1) {
	-webkit-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	-moz-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
}

// prefix declarations
@mixin prefixed($property, $value) {
	@if $webkit==true {
		-webkit-#{$property}: #{$value};
	}

	@if $moz==true {
		-moz-#{$property}: #{$value};
	}

	@if $ms==true {
		-ms-#{$property}: #{$value};
	}

	@if $o==true {
		-o-#{$property}: #{$value};
	}

	#{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
	@if $webkit==true {
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $moz==true {
		@-moz-keyframes #{$name} {
			@content;
		}
	}

	@if $ms==true {
		@-ms-keyframes #{$name} {
			@content;
		}
	}

	@if $o==true {
		@-o-keyframes #{$name} {
			@content;
		}
	}

	@keyframes #{$name} {
		@content;
	}
}

@mixin property() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transition, 0.3s ease-out);
}

@mixin transform() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transform, translate(0, -50%));
}


/*--------------------------------------
	- Component
----------------------------------------*/
// Nav Menu Mixin
@mixin nav($li: inline-block, $position: relative, $ff: $font, $fs: 20px, $fw: 400, $color: $global-color, $bg: transparent, $tt: capitalize, $py: 10px, $px: 10px, $pt: null, $pr: null, $pb: null, $pl: null, $my: null, $mx: null, $mt: null, $mr: null, $mb: null, $ml: null, $display: block, $index: 99, $h-color: $color, $h-bg: $bg, $h-py: $py, $h-px: $px, $h-pt: $pt, $h-pr: $pr, $h-pb: $pb, $h-pl: $pl, $h-my: $my, $h-mx: $mx, $h-mt: $mt, $h-mr: $mr, $h-mb: $mb, $h-ml: $ml, $h-td: none) {

	ul {
		margin: 0;
	}

	li {
		display: $li;

		a {
			position: $position;
			font-family: $ff;
			font-size: $fs;
			font-weight: $fw;
			color: $color;
			background: $bg;
			text-transform: $tt;
			padding: $py $px;
			padding-top: $pt;
			padding-right: $pr;
			padding-bottom: $pb;
			padding-left: $pl;
			margin: $my $mx;
			margin-top: $mt;
			margin-right: $mr;
			margin-bottom: $mb;
			margin-left: $ml;
			display: $display;
			z-index: $index;

			&:hover {
				color: $h-color;
				background: $h-bg;
				padding: $h-py $h-px;
				padding-top: $h-pt;
				padding-right: $h-pr;
				padding-bottom: $h-pb;
				padding-left: $h-pl;
				margin: $h-my $h-mx;
				margin-top: $h-mt;
				margin-right: $h-mr;
				margin-bottom: $h-mb;
				margin-left: $h-ml;
				text-decoration: $h-td;
			}
		}
	}
}

// Button mixin
@mixin btn ($position: relative, $padding-y, $padding-x, $size: $global-font-size, $border: null, $radius: null, $display: inline-block, $line-height: 1, $font-weight: normal) {
	position: $position;
	border: $border;
	border-radius: $radius;
	padding: $padding-y $padding-x;
	font-size: $size;
	line-height: $line-height;
	display: $display;
	overflow: hidden;
	text-align: center;
	font-weight: $font-weight;
}

// Button Color
@mixin btn-color($value, $color) {
	background: $value;
	color: $color;
}

// Form Input mixin 
@mixin form-input($width: 100%, $color: $global-color, $font-size: $global-font-size, $px, $py, $m: 30px, $opacity: 1, $border: none) {
	width: $width;
	color: $color;
	opacity:$opacity;
	padding: $py $px;
	margin-top: $m;
	font-size: $font-size;
	border: $border;
}

// Dropdown Menu Mixin
@mixin dropdown-menu($width: 240px, $padding: 15px, $apadding: 10px, $margin: 5px, $align: left, $top: 100%, $index: 99, $radius: null, $shadow: null, $hover-bg: $black, $hover-color: $white) {
	position: absolute;
	width: $width;
	padding: $padding;
	text-align: $align;
	top: $top;
	z-index: $index;
	border-radius: $radius;
	box-shadow: $shadow;
	opacity: 0;
	visibility: hidden;

	li{
		display: block;
		a{
			border-radius: $radius;
			padding: $apadding;
			margin-bottom: $margin;
			display: block;
			&:hover{
				background: $hover-bg;
				color: $hover-color;
			}
		}
	}
}

// Footer Menu 
@mixin footer-menu($size: 18px, $padding: 10px, $opacity: 1, $display: block, $text: capitalize) {
	ul {
		li {
			a {
				font-size: $size;
				opacity: $opacity;
				padding-bottom: $padding;
				display: $display;
				text-transform: $text;
			}
		}
	}
}

// Footer Widget 
@mixin footer-widget($value, $weight: 600, $prefix, $padding) {
	h3{
		font-size: $value;
		padding-#{$prefix}: $padding;
		font-weight: $weight;
	}
	@include footer-menu;
}


//Extra Small Screen Only
@mixin xs {
	@media screen and (max-width: 767px) {
		@content;
	}
}

//Small Screen
@mixin sm {
	@media screen and (min-width: 576px) {
		@content;
	}
}

//Medium Screen
@mixin md {
	@media screen and (min-width: 768px) {
		@content;
	}
}

//Large Screen
@mixin lg {
	@media screen and (min-width: 992px) {
		@content;
	}
}

//Extra Large Screen
@mixin xl {
	@media screen and (min-width: 1200px) {
		@content;
	}
}

//Desktop Screen
@mixin desktop {
	@media screen and (min-width: 1367px) {
		@content;
	}
}